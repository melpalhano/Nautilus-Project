#!/usr/bin/env python3
"""
Teste r√°pido ap√≥s corre√ß√µes de importa√ß√£o
"""

def main():
    print("üîß TESTE P√ìS-CORRE√á√ÉO")
    print("=" * 30)
    
    success_count = 0
    total_tests = 6
    
    # Teste 1: Dataset
    try:
        from data.dataset import Objaverse
        print("‚úÖ 1/6 - Objaverse dataset")
        success_count += 1
    except Exception as e:
        print(f"‚ùå 1/6 - Objaverse: {e}")
    
    # Teste 2: Serializa√ß√£o
    try:
        from data.serializaiton import detokenize, serialize_mesh, coordinates_compression
        print("‚úÖ 2/6 - Serializa√ß√£o (detokenize, serialize_mesh, coordinates_compression)")
        success_count += 1
    except Exception as e:
        print(f"‚ùå 2/6 - Serializa√ß√£o: {e}")
    
    # Teste 3: Modelo principal
    try:
        from model.nautilus import MeshTransformer
        print("‚úÖ 3/6 - MeshTransformer")
        success_count += 1
    except Exception as e:
        print(f"‚ùå 3/6 - MeshTransformer: {e}")
    
    # Teste 4: Data utils
    try:
        from data.data_utils import to_mesh, load_process_mesh
        print("‚úÖ 4/6 - Data utils")
        success_count += 1
    except Exception as e:
        print(f"‚ùå 4/6 - Data utils: {e}")
    
    # Teste 5: Miche encoder
    try:
        from miche.encode import encode_mesh
        print("‚úÖ 5/6 - Miche encoder")
        success_count += 1
    except Exception as e:
        print(f"‚ùå 5/6 - Miche encoder: {e}")
    
    # Teste 6: Configura√ß√£o
    try:
        import yaml
        with open('config/nautilus_infer.yaml', 'r') as f:
            config = yaml.safe_load(f)
        print("‚úÖ 6/6 - Configura√ß√£o YAML")
        success_count += 1
    except Exception as e:
        print(f"‚ùå 6/6 - Configura√ß√£o: {e}")
    
    print("\n" + "=" * 30)
    print(f"üìä RESULTADO: {success_count}/{total_tests} testes passaram")
    
    if success_count == total_tests:
        print("üéâ TODAS AS CORRE√á√ïES FUNCIONANDO!")
        print("\n‚ú® O projeto agora est√° 100% funcional")
        print("üìù Voc√™ pode executar:")
        print("   - python infer_pc.py --help")
        print("   - python demo_completo.py")
        
        # Teste criar modelo
        try:
            model = MeshTransformer(dim=256, max_seq_len=1000, attn_depth=4)
            param_count = sum(p.numel() for p in model.parameters())
            print(f"\nüß† Modelo criado com {param_count:,} par√¢metros")
        except Exception as e:
            print(f"\n‚ö†Ô∏è  Erro ao criar modelo: {e}")
            
    elif success_count >= 4:
        print("‚ö° Maioria das corre√ß√µes OK - projeto funcional")
        print("   Alguns componentes opcionais podem ter problemas")
    else:
        print("‚ùå Ainda h√° problemas significativos")
        print("   Verifique as depend√™ncias")

if __name__ == "__main__":
    main()
